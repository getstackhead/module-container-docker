#jinja2: trim_blocks:False
# This file was generated by StackHead. Do not modify it.
provider "docker" {
{%- for registry in app_config.container.registries | default([]) %}
  registry_auth {
    address = "{{ registry.url|default('registry.hub.docker.com') }}"
    username = "{{ registry.username }}"
    password = "{{ registry.password }}"
  }
{%- endfor %}
}

{% for service in app_config.container.services %}
resource "docker_container" "stackhead-{{ project_name }}-{{ service.name }}" {
  image = "{{ service.image }}"
  name  = "stackhead-{{ project_name }}-{{ service.name }}"
  restart = "always"

  networks_advanced {
    name = docker_network.stackhead-network-{{ project_name }}.name
    aliases = ["{{ service.name }}"]
  }

{%- if service.user is defined %}
  user = "{{ service.user }}"
{%- endif %}

{%- for domainConfig in app_config.domains if domainConfig.expose is defined %}
{%- for expose in domainConfig.expose if expose.internal_port is defined and expose.service == service.name %}
  ports {
    internal = {{ expose.internal_port }}
  }
{%- endfor %}
{%- endfor %}
{%- if service.environment is defined %}
  env = [{% for envName, envVal in service.environment.items() %}{% if not loop.first %},{% endif %}"{{ envName }}={{ envVal|getstackhead.stackhead.TFreplace(project_name) }}"{% endfor %}]
{%- endif %}

{%- if service.volumes is defined %}
{%- for volume in service.volumes %}
  volumes {
  {%- if volume.type == "custom" %}
    host_path = "{{ volume.src }}"
    container_path = "{{ volume.dest }}"
  {%- else %}
  {%- set sanitizedSrc = volume.src | regex_replace('[^\w]', '_') %}
    volume_name = docker_volume.{{ volume.type }}-{{ project_name }}{% if volume.type == "local" %}-{{ service.name }}{% endif %}-{{ sanitizedSrc }}.name
    container_path = "{{ volume.dest }}"
  {%- endif %}
  {% if volume.mode is defined and volume.mode == 'ro' %}  read_only = true{% endif %}
  }
{%- endfor %}
{%- endif %}
{%- if service.volumes_from is defined %}
{%- for service in service.volumes_from %}
  volumes {
    from_container = docker_container.stackhead-{{ project_name }}-{{ service | regex_replace(':ro$','') }}.name
    {% if service.endswith(':ro') %}read_only = true{% endif %}
  }
{%- endfor %}
{%- endif %}
}
{% endfor %}

{%- set globalVolumeKeys = [] %}
{%- for service in app_config.container.services if service.volumes is defined %}
  {%- for volume in service.volumes %}
    {%- set src = volume.src|default('') %}
    {%- set sanitizedSrc = src | regex_replace('[^\w]', '_') %}
    {%- if volume.type == "local" %}
resource "docker_volume" "local-{{ project_name }}-{{ service.name }}-{{ sanitizedSrc }}" {
  name = "local-{{ project_name }}-{{ service.name }}-{{ sanitizedSrc }}"
  driver_opts = {
    type: "none",
    device: "{{ stackhead__containerdata_location_services|format(service.name, src) }}",
    o: "bind"
  }
}
    {%- elif volume.type == "global" and sanitizedSrc not in globalVolumeKeys %}
resource "docker_volume" "global-{{ project_name }}-{{ sanitizedSrc }}" {
  name = "global-{{ project_name }}-{{ sanitizedSrc }}"
  driver_opts = {
    type: "none",
    device: "{{ stackhead__containerdata_location_global|format(src) }}",
    o: "bind"
  }
}
      {%- set _ = globalVolumeKeys.append( sanitizedSrc ) %}
    {%- endif %}
  {%- endfor %}
{%- endfor %}

resource "docker_network" "stackhead-network-{{ project_name }}" {
  name = "stackhead-network-{{ project_name }}"
}
