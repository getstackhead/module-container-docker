# This task should configure the software for the given project.
---
- name: "StackHead::Container || Build src folder list || Project: {{ project_name }}"
  block:
    - name: "Container hooks location"
      set_fact:
        managedContainerFolders: [{ 'path': "{{ stackhead__containerhooks_location }}" }]
    - name: "Collect local volumes"
      set_fact:
        managedContainerFolders: "{{ managedContainerFolders|d([]) + [ { 'path': stackhead__containerdata_location_services|format(item.0.name, item.1.src|d()), 'user': item.1.user|d('') } ] }}"
      when: item.1.type == 'local'
      with_subelements:
        - "{{ app_config.container.services }}"
        - volumes
        - flags:
          skip_missing: True
    - name: "Collect global volumes"
      set_fact:
        managedContainerFolders: "{{ managedContainerFolders|d([]) + [ { 'path': stackhead__containerdata_location_global|format(item.1.src|d()), 'user': item.1.user|d('') } ] }}"
      when: item.1.type == 'global'
      with_subelements:
        - "{{ app_config.container.services }}"
        - volumes
        - flags:
          skip_missing: True
    - name: "Collect custom volumes"
      set_fact:
        managedContainerFolders: "{{ managedContainerFolders|d([]) + [ { 'path': item.1.src, 'user': item.1.user|d('') } ] }}"
      when: item.1.type == 'custom'
      with_subelements:
        - "{{ app_config.container.services }}"
        - volumes
        - flags:
          skip_missing: True
- block:
    - name: "StackHead::Container || Checking project Docker folders"
      stat:
        path: "{{ item.path }}"
      register: folder_stats
      with_items: "{{ managedContainerFolders }}"
    - name: "StackHead::Container || Creating missing project Docker folders"
      file:
        path: "{{ item.item.path }}"
        state: directory
        mode: 0755
        owner: stackhead
        group: stackhead
      when: item.stat.exists == false
      with_items: "{{ folder_stats.results }}"
    - name: Adjust Docker folder permissions
      file:
        path: "{{ item.path }}"
        owner: "{{ (item.user|string).split(':')[0] }}"
        group: stackhead
      when: item.user is defined and item.user != ''
      with_items: "{{ managedContainerFolders }}"
  when: managedContainerFolders|d([]) != []

- name: remove old hook files
  raw: "rm -rf {{ stackhead__containerhooks_location }}/*"
- block:
    - set_fact:
        collected_hooks: "{{ collected_hooks|d([]) + [{ 'src': item.hooks.execute_after_setup, 'prefix': 'afterSetup' }] }}"
      when: item.hooks.execute_after_setup|d("") != ""
      with_items: "{{ app_config.container.services }}"
    - set_fact:
        collected_hooks: "{{ collected_hooks|d([]) + [{ 'src': item.hooks.execute_before_destroy, 'prefix': 'beforeDestroy' }] }}"
      when: item.hooks.execute_before_destroy|d("") != ""
      with_items: "{{ app_config.container.services }}"
- name: Copy hook files
  synchronize:
    src: "{{ stackhead__config_folder }}/{{ item.src }}"
    dest: "{{ stackhead__containerhooks_location }}/{{ item.prefix}}_{{ item.src|basename }}"
    perms: false
    rsync_opts:
      - "--chmod=F755"
  with_items: "{{ collected_hooks|d([]) }}"
- name: "StackHead::Container || Generate Terraform Docker configuration file | Project: {{ project_name }}"
  include_tasks: "{{ module_role_path | default(role_path) }}/tasks/docker_steps/generate-docker-tf.yml"
